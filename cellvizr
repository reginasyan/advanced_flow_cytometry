install.packages("Rtsne")
install.packages("uwot")
# Install flowCore
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install("flowCore")
# Install CellVizR
install.packages("devtools")
library("devtools")
install_github("tchitchek-lab/CellVizR")
library(CellVizR)
# Read the vignette
library(flowCore)
browseVignettes("flowCore")


setwd("~/advanced_cytometry")

files <- list.files("./02_data/01_fcs/", 
                    pattern = "fcs",
                    full.names = TRUE)

# import the FCS files into a Celldata object 
DataCell <- import(files, 
                   filetype = "fcs", 
                   transform = "arcsinh",
                   exclude.markers = c("Cell_length","Dead","Beads","Cells","CD38","HLADR","CD14","CD62L","Bcl-6","IgD","B5R","CD195","CD138","CD95","TNFa","IL10"),
                   d.method = "uniform",
                   parameters.method = list("target.percent" = 0.1))


# Retrieving of the marker names
QCN <- QCMarkerNames(files)




plot = QCMarkerRanges(files)

plot <- ggiraph::girafe(ggobj = plot,
                        options = list(ggiraph::opts_sizing(width = .9),
                                       ggiraph::opts_hover_inv(css = "opacity:0.6;"),
                                       ggiraph::opts_hover(css = "fill:black;")))

plot

#Metadata
metadata <- data.frame(individual = gsub("\\.fcs", "", basename(files)))
metadata$condition <- sapply(strsplit(metadata$individual, "_"), function(x) x[1])
metadata$individual <- sapply(strsplit(metadata$individual, "_"), function(x) x[2])
rownames(metadata) <- paste(metadata$condition, metadata$individual, sep = "_")
DataCell <- assignMetadata(DataCell, metadata = metadata)


# Perform Manifold from the "Celldata" object
DataCell <- generateManifold(DataCell,
                             method = "UMAP", 
                             n_neighbors = 15,
                             n_components = 2,
                             metric = "euclidean",
                             n_epochs = NULL,
                             n_threads = 1, 
                             n_sgd_threads = 1,
                             scale = FALSE)

#K-means
DataCell <- identifyClusters(DataCell, 
                             space = "manifold", 
                             method = "kmeans", 
                             centers = 100, 
                             nstart = 3)

#flowSOM
markers <- colnames(DataCell@matrix.expression)
DataCell <- identifyClusters(DataCell,
                             space = "markers",
                             markers = markers,
                             method = "FlowSOM",
                             nClus = 100,
                             xdim = 20,
                             ydim = 20)

plotClustersCounts(DataCell, 
                   clusters = NULL,
                   sort = TRUE)

#SAVE CELL
save(DataCell,file = "DataCell.Rsave")
load("./rsave/DataCell.Rsave")

#2_CLUSTER CONTROL
#Small clusters ?
QCS <- QCSmallClusters(DataCell,
                       th.size = 50, 
                       plot.device = TRUE)
#uniform clusters ? 
QCU <- QCUniformClusters(DataCell,
                         uniform.test = "both",
                         th.pvalue = 0.05,
                         th.IQR = 2,
                         plot.device = TRUE)

#Clusters' plot 
plotManifold(DataCell, 
             markers = "CD3",
             samples = NULL,
             downsampling = 200000)

#3_Heatmap
hm.exp <- plotHmExpressions(DataCell, 
                            metaclusters = 10)
gridExtra::grid.arrange(hm.exp)
plot(hm.exp)

#Heatmap with MOI
hm.exp <- plotHmExpressions(DataCell, 
                            markers = c("CD3", "CD127", "CD45RA", "CD20","CD21","CD22","CD27","CD80","IgG","IgM","CD23","CD40","CD197","Bcl2","CD69","CD279","Ki67"),
                            metaclusters = 10)
gridExtra::grid.arrange(hm.exp)
plot(hm.exp)


#Volcanoplot

samples_baseline = selectSamples(DataCell, condition = "BPD19")
samples_PPD03 = selectSamples(DataCell, condition = "PPD03" )

DataCell <- computeStatistics(DataCell, 
                              condition = samples_PPD03, 
                              ref.condition = samples_baseline,
                              comparison = "samples_PPD03 vs. samples_baseline", 
                              test.statistics = "t.test",
                              paired = FALSE)

plotVolcano(DataCell,
            comparison = ("samples_PPD03 vs. samples_baseline"),
            th.pv = 1.3,
            th.fc = 1.5,
            plot.text = TRUE)

