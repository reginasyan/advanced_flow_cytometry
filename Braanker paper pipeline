#installing packages

if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("flowCore")
BiocManager::install("flowViz")
BiocManager::install("flowVS")
BiocManager::install("SingleCellExperiment")
BiocManager::install("flowCut")
BiocManager::install("CATALYST")

if(!requireNamespace("devtools", quietly=TRUE))
  install.packages("devtools")

devtools::install_github('saeyslab/CytoNorm')
install.packages("uwot")
install.packages("knitr")
install.packages("xlsx")
install.packages("openxlsx")
install.packages("umap")
install.packages("remotes")
remotes::install_version("Matrix", version = "1.6-1")
install.packages("irlba", type="source")
packageVersion("Matrix")

# set seed and install libraries
set.seed(123)
library(flowCore)
library(flowViz)
library(flowVS)
library(flowAI)
library(PeacoQC)
library(CATALYST)
library(CytoNorm)
library(SingleCellExperiment)
library(uwot)
library(knitr)
library(xlsx)
library("flowCore")
library(openxlsx)
library("flowCut")

#directories
setwd("~/R/advanced flow cytometry/project")

fcs.dir<- file.path(getwd(), "02_data") 
fcs_data <- read.flowSet(path=fcs.dir, pattern="*.fcs", transformation = FALSE, truncate_max_range = FALSE)
fcs_data <- fcs_data[, c(1,2,3,4,5,6,7,9,12,13,15, 16, 18, 19, 20, 21, 22, 25, 27, 29, 31)]


# data frame of the panel

fcs_colname <- colnames(fcs_data)
marker_class <- rep("none", ncol(fcs_data[[1]]))
marker_state <- c(6, 8, 10, 15, 16, 17)
marker_class[marker_state] <- "state" #markers that indicate "state" of a cell, such as PDL1 marker, or use it to indicate markers you won't use for clustering
marker_type <- c(5, 7, 9, 11, 12, 13, 14, 18, 19, 20, 21)
marker_class[marker_type] <- "type" # markers that indicate surface markers, such as CD3, CD4, or markers that you do want to use for clustering
marker_class <- factor(marker_class, levels=c("type", "state", "none"))
antigen <- pData(parameters(fcs_data[[1]]))$desc

panel <- data.frame(fcs_colname, antigen, marker_class, row.names = NULL)
write.xlsx(panel, file="~/Regina/training_data/project/04_exports/panel_A.xlsx", sheetName="Panel_A")


#inspect the data to decide which type of transformation suits better
expression_data <- fcs_data[[1]]
expression_data <- expression_data@exprs


#tranform the data with FlowCore
markerstotransform <- panel[panel$marker_class != "none", 1]

transformation <- arcsinhTransform()
transform_list <- transformList(from = markerstotransform, tfun = transformation)
transformed_flowset <- transform_list %on% fcs_data


# Open the PDF device
pdf("C:/Users/Admin/Documents/Regina/training_data/project/03_figures/Density_plot_transformation_FlowCore_asin.pdf")

# Create the density plot
densityplot(~`(Pr141)Di`+`(Nd142)Di`+`(Nd143)Di`+`(Nd145)Di`+`(Nd148)Di`+`(Sm149)Di`+`(Eu151)Di`+`(Eu153)Di`+`(Gd156)Di`+`(Gd158)Di`+`(Tb159)Di`+`(Gd160)Di`+`(Dy162)Di`+`(Er167)Di`+`(Tm169)Di`+`(Yb171)Di`+`(Yb174)Di`, fcs_data[[1]])
densityplot(~`(Pr141)Di`+`(Nd142)Di`+`(Nd143)Di`+`(Nd145)Di`+`(Nd148)Di`+`(Sm149)Di`+`(Eu151)Di`+`(Eu153)Di`+`(Gd156)Di`+`(Gd158)Di`+`(Tb159)Di`+`(Gd160)Di`+`(Dy162)Di`+`(Er167)Di`+`(Tm169)Di`+`(Yb171)Di`+`(Yb174)Di`, transformed_flowset[[1]])

# Close the PDF device to save the file
dev.off()

# Loop for the QC by flowCut
for (i in 1:42) {
  file_name <- basename(transformed_flowset[[i]]@description$FILENAME)
  # Sort the data by time column for each sample
  transformed_flowset[[i]]@exprs <- transformed_flowset[[i]]@exprs[order(transformed_flowset[[i]]@exprs[, "Time"]), ]
  
  # Apply the flowCut function for each sample
  res_flowCut <- flowCut(transformed_flowset[[i]], FileID = file_name, Plot = "All", Segment = 1000)
  
  # Optionally, print the result or save it
  print(paste("Results for sample", i))
  print(res_flowCut$data)
  
}



#creating metadata
files <- list.files("./02_data/", 
                    pattern = "fcs",
                    full.names = TRUE)
file_name <- fsApply(transformed_flowset, identifier)
md <- data.frame(individual = gsub("\\.fcs", "", basename(files)))
md$condition <- sapply(strsplit(md$individual, "_"), function(x) x[1])
md$individual <- sapply(strsplit(md$individual, "_"), function(x) x[2])
md$sample <- paste(md$condition, md$individual, sep = "_")
md$file_name <- file_name
kable(md)


#subsampling

Downsampling_FlowSet <- function(x, samplesize , replace=TRUE, prob=NULL){
  if(missing(samplesize))
    samplesize <- min(flowCore::fsApply(x,nrow))
  flowCore::fsApply(x, function(ff){
    i <- sample(nrow(ff), size = samplesize, replace=replace, prob)
    ff[i,]
  })
}


Subsampling_FlowSet <- function(x, fraction, md){
  b <- round(fraction*length(x), digits=0)
  
  listq <- sample(x=length(x), b, replace=FALSE)
  listq <- sort(listq)
  
  fcs_train<-x[c(listq)]
  
  md_train <- md[c(listq),]
  
  
  fcs_train <<- fcs_train
  md_train <<- md_train
  
  listy <- 1:length(x)
  
  listz <- subset(listy, !(listy %in% listq))
  
  listz <- sort(listz)
  
  fcs_test <- x[c(listz)]
  
  md_test <- md[c(listz),]
  
  fcs_test <<- fcs_test
  md_test <<- md_test
  
}


Subsampling_FlowSet(transformed_flowset,0.25, md=md) #test and train set are created

#UMAP

fcs_train <- Downsampling_FlowSet(fcs_train, samplesize =20000) # you can still downsample your training set if needed, but you can also include all or more cells

sce_train <- prepData(fcs_train, md=md_train, panel= panel, FACS = TRUE, transform=FALSE, md_cols =list(file="file_name", id="sample", factors=c("individual", "condition")))
assayNames(sce_train)[1] <- "exprs"

exprs_train <- assay(sce_train, "exprs")
exprs_train <- t(exprs_train)
exprs_train <- exprs_train[,c(marker_type)] #markers you want to use for clustering, you can also use marker_state or marker_type

set.seed(1234)

umap_train <- uwot::umap(exprs_train, n_neighbors=5)
reducedDim(sce_train, "UMAP")<- umap_train
plotDR(sce_train, "UMAP", color_by="condition")

umap_train <- uwot::umap(exprs_train, n_neighbors=15)
reducedDim(sce_train, "UMAP")<- umap_train
plotDR(sce_train, "UMAP", color_by="condition")

umap_train <- uwot::umap(exprs_train, n_neighbors=50)
reducedDim(sce_train, "UMAP")<- umap_train
plotDR(sce_train, "UMAP", color_by="condition")

#if you chose the right n_neighbors, you can also test min_dist
umap_train <- uwot::umap(exprs_train, n_neighbors=15, min_dist = 0.01)
reducedDim(sce_train, "UMAP")<- umap_train
plotDR(sce_train, "UMAP", color_by="condition")

umap_train <- uwot::umap(exprs_train, n_neighbors=15, min_dist = 0.1)
reducedDim(sce_train, "UMAP")<- umap_train
plotDR(sce_train, "UMAP", color_by="condition")

umap_train <- uwot::umap(exprs_train, n_neighbors=15, min_dist = 0.5)
reducedDim(sce_train, "UMAP")<- umap_train
plotDR(sce_train, "UMAP", color_by="condition")

# choose the optimal parameters, to assess robustness of the umap you can vary the seed

set.seed(1234)
umap_train <- uwot::umap(exprs_train, n_neighbors=15, min_dist = 0.01)
reducedDim(sce_train, "UMAP")<- umap_train
plotDR(sce_train, "UMAP", color_by="condition")

set.seed(7460)
umap_train <- uwot::umap(exprs_train, n_neighbors=15, min_dist = 0.01)
reducedDim(sce_train, "UMAP")<- umap_train
plotDR(sce_train, "UMAP", color_by="condition")

set.seed(5024)
umap_train <- uwot::umap(exprs_train, n_neighbors=15, min_dist = 0.01, ret_model = TRUE)
reducedDim(sce_train, "UMAP")<- umap_train$embedding
plotDR(sce_train, "UMAP", color_by="condition")
plotDR(sce_train, "UMAP", color_by="CD3")
plotDR(sce_train, "UMAP", color_by="CD21")

#add other samples to the UMAP
fcs_test <- Downsampling_FlowSet(fcs_test, samplesize =20000)

sce_test <-prepData(fcs_test, md=md_test, panel= panel, FACS = TRUE, transform=FALSE, md_cols =list(file="file_name", id="sample", factors=c("Group_ID", "batch")))
assayNames(sce_test)[1] <- "exprs"

exprs_test <- assay(sce_test, "exprs")
exprs_test <- t(exprs_test)
exprs_test <- exprs_test[,c(marker_type)]

umap_test <- uwot::umap_transform(exprs_test, umap_train)

reducedDim(sce_train, "UMAP")<- NULL

umap_total <- rbind(umap_train$embedding, umap_test)

sce_total <- cbind(sce_train, sce_test)

reducedDim(sce_total, "UMAP") <- umap_total

plotDR(sce_total, "UMAP", color_by = "sample_id")
plotDR(sce_total, "UMAP", color_by = "CD4")
plotDR(sce_total, "UMAP", color_by = "CD8")


#Clustering data

set.seed(5024)

sce<- prepData(transformed_flowset, md=md, panel= panel, FACS = TRUE, transform=FALSE, md_cols =list(file="file_name", id="Sample_ID", factors=c("individual", "condition")))

assayNames(sce)[1] <- "exprs"
sce <- cluster(sce, features="type", maxK=12, seed=5024)

sce <- runDR(sce, "UMAP", cells = 6000, features = "type")
plotDR(sce, "UMAP", color_by="meta12")
plotDR(sce, "UMAP", color_by="CD4")
plotDR(sce, "UMAP", color_by="CD8")

#Plot the number of cells per sample
Cell_numbers <-plotCounts(sce, prop=FALSE, group_by = "sample_id")#change prop to TRUE to see frequencies
print(Cell_numbers)
Cell_numbers_data <- Cell_numbers[["data"]] #dataframe of number of cells per sample, could be useful if you want to export dataframe and use it to make graphs in other programs, such as Graphpad Prism


#Heatmap of the median expression per marker per metacluster or sample, more information can be found in https://bioconductor.org/packages/release/bioc/html/CATALYST.html 

plotExprHeatmap(sce, features = "type", by="cluster_id",k="meta12",scale = "last", q = 0, perc=TRUE,bars = FALSE)

plotExprHeatmap(sce, features = "type", by="sample_id",k="meta12",scale = "last", q = 0, perc=TRUE,bars = FALSE) #this plot can also be used to check for batch effects 

Cell_freq_clusters <- plotAbundances(sce, k = "meta12", group_by = "sample_id")
print(Cell_freq_clusters)
Cell_freq_clusters_data <- Cell_freq_clusters[["data"]]
write.xlsx(x=Cell_freq_clusters_data, file="Cellclusterfrequencies.xlsx")


