library(ggplot2)    
library(dplyr)    

# Create Metaclusters
# 1) Define clusters for each metacluster
metaclusters <- list(
  "1"  = c("119", "109", "110", "120", "100", "86", "88", "108", "98", "99", "87"),
  "2"  = c("122", "121", "112", "153", "101", "111", "102", "91", "89", "103", "104", 
           "131", "133", "113", "130", "134", "114", "123", "124", "132", "145", "154", 
           "92", "82", "79", "81"),
  "3"  = c("128", "141", "161", "127", "118", "129", "173", "107", "140", "117", "106", "125"),
  "4"  = c("126", "142", "147", "159", "160", "148", "162", "149", "175", "163", "176", 
           "174", "156", "76", "171", "157", "158", "139", "172", "138", "146", "170"),
  "5"  = c("151", "143", "164", "177", "150", "144", "152", "165", "178", "179", "84", 
           "166", "180", "83"),
  "6"  = c("90", "80", "1", "97", "21", "20", "13", "74", "15", "26", "16", "45", "39", 
           "44", "34", "35", "27", "85", "78", "32", "2", "41", "22", "6", "54", "53", 
           "47", "46", "55", "7", "8"),
  "7"  = c("33", "23", "24", "73", "75", "25", "48", "43", "31", "19", "62", "56", "64", 
           "65", "67", "9", "11", "18", "12", "38", "37", "50", "30", "51", "49", "52"),
  "8"  = c("3", "4", "5", "14", "61", "66", "28", "10", "17"),
  "9"  = c("59", "68", "36", "29", "57", "60", "63", "69"),
  "10" = c("137", "96", "116", "72", "94", "77", "169", "136", "168", "95", "71", "167", 
           "58", "40", "105", "93", "115", "155", "42", "135", "70")
)

# 2) Create cluster to metacluster dataframe
df_cluster_to_mc <- do.call(
  rbind,
  lapply(names(metaclusters), function(mc) {
    data.frame(
      cluster     = metaclusters[[mc]],
      metacluster = mc,
      stringsAsFactors = FALSE
    )
  })
)

# 3) Create a loop
DataCell_metaclusters <- DataCell
for (mc_name in names(metaclusters)) {
  DataCell_metaclusters <- createMetaclusters(
    DataCell_metaclusters,
    clusters          = metaclusters[[mc_name]],
    metacluster.name  = mc_name
  )
}

# Create a general function for processing each situation and plotting bubble plots
plot_bubble_chart <- function(cluster_list, df_cluster_to_mc, output_file, title_prefix) {
  # Create a dataframe for the bubble chart
  df_bubble <- data.frame()
  
  # Iterate through the cluster list for each condition
  for (condition_name in names(cluster_list)) {
    condition_short <- gsub("samples_|_vs_samples_baseline", "", condition_name)
    
    # Extract significantly upregulated or downregulated clusters
    clusters <- cluster_list[[condition_name]]
    
    # Check if clusters are empty
    if (length(clusters) > 0) {
      # Match the significantly changed clusters with the cluster-to-metacluster mapping table
      df_up <- merge(
        x  = data.frame(cluster = clusters, stringsAsFactors = FALSE),
        y  = df_cluster_to_mc,
        by = "cluster"
      )
      
      # Count the number of clusters in each metacluster
      df_count <- df_up %>%
        group_by(metacluster) %>%
        summarise(n_up = n()) %>%
        ungroup()
      
      # Complete missing metaclusters
      all_metaclusters <- as.character(1:10)
      df_count <- merge(
        data.frame(metacluster = all_metaclusters, stringsAsFactors = FALSE),
        df_count,
        by = "metacluster",
        all.x = TRUE
      )
      df_count$n_up[is.na(df_count$n_up)] <- 0
      
      # Append to the main table
      df_count$condition <- condition_short
      
      # 合并到总表
      df_bubble <- rbind(df_bubble, df_count)
    } else {
      # If clusters are empty, log the information
      message(sprintf("No clusters for condition: %s", condition_short))
    }
  }
  
  # If there is no data, skip plotting
  if (nrow(df_bubble) == 0) {
    message("No data available for plotting.")
    return()
  }
  
  # Convert metacluster to a factor to ensure proper order in the plot
  df_bubble$metacluster <- factor(
    df_bubble$metacluster,
    levels = as.character(1:10)
  )
  
  # Plot the bubble plot
  bubble_plot <- ggplot(df_bubble, aes(
    x     = condition, 
    y     = metacluster, 
    size  = n_up,
    color = n_up
  )) +
    geom_point(alpha = 0.8) +
    scale_size(range = c(1, 10)) +
    scale_color_gradient(low = "lightpink", high = "red") +
    labs(
      title = paste(title_prefix, "Conditions"),
      x     = "Condition", 
      y     = "Metacluster",
      size  = "N of Clusters",
      color = "N of Clusters"
    ) +
    theme_bw(base_size = 14) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
  # Save the bubble plot
  png(output_file, width = 3000, height = 3000, res = 350)
  plot(bubble_plot)
  dev.off()
}

# Use the function to plot bubble plots for four situations
plot_bubble_chart(
  cluster_list   = upregulated_clusters_PP_vs_baseline,
  df_cluster_to_mc = df_cluster_to_mc,
  output_file    = "./03_figures/bubbleplots/bubbleplot_upregulated_PP_vs_baseline.png",
  title_prefix   = "Upregulated clusters across PP"
)

plot_bubble_chart(
  cluster_list   = upregulated_clusters_PB_vs_baseline,
  df_cluster_to_mc = df_cluster_to_mc,
  output_file    = "./03_figures/bubbleplots/bubbleplot_upregulated_PB_vs_baseline.png",
  title_prefix   = "Upregulated clusters across PB"
)

plot_bubble_chart(
  cluster_list   = downregulated_clusters_PP_vs_baseline,
  df_cluster_to_mc = df_cluster_to_mc,
  output_file    = "./03_figures/bubbleplots/bubbleplot_downregulated_PP_vs_baseline.png",
  title_prefix   = "Downregulated clusters across PP"
)

plot_bubble_chart(
  cluster_list   = downregulated_clusters_PB_vs_baseline,
  df_cluster_to_mc = df_cluster_to_mc,
  output_file    = "./03_figures/bubbleplots/bubbleplot_downregulated_PB_vs_baseline.png",
  title_prefix   = "Downregulated clusters across PB"
)
