library(CellVizR)  
library(ggplot2)  

# Differential analysis (volcanoplots)  
# Initialize statistic slot  
DataCell@statistic <- data.frame()  
all_stat_results <- data.frame()  
# Select baseline samples (BPD19)  
samples_baseline <- selectSamples(DataCell, condition = "BPD19")

# Define conditions for comparison  
list.conditions <- list("samples_PPD03" = selectSamples(DataCell, condition = "PPD03"),
                        "samples_PPD08" = selectSamples(DataCell, condition = "PPD08"),
                        "samples_PPD14" = selectSamples(DataCell, condition = "PPD14"),
                        "samples_PPD57" = selectSamples(DataCell, condition = "PPD57"),
                        "samples_PBD03" = selectSamples(DataCell, condition = "PBD03"),
                        "samples_PBD08" = selectSamples(DataCell, condition = "PBD08"),
                        "samples_PBD14" = selectSamples(DataCell, condition = "PBD14"),
                        "samples_PBD28" = selectSamples(DataCell, condition = "PBD28"))

# Initialize lists to store results 
upregulated_clusters_list <- list() 
downregulated_clusters_list <- list() 
all_condition_names <- c() 

# Set thresholds
th.pv <- 1.3  # p-value threshold (log10 scale)
th.fc <- 1.5  # fold change threshold

# Loop through conditions, compute statistics, generate volcano plots, and extract up/downregulated clusters
for (i in seq_along(list.conditions)) {
  condition_name <- names(list.conditions)[i]
  all_condition_names <- c(all_condition_names, condition_name)
  
  # Compute statistics
  DataCell <- computeStatistics(DataCell, 
                                condition = list.conditions[[i]], 
                                ref.condition = samples_baseline,
                                comparison = paste0(condition_name, " vs. samples_baseline"), 
                                test.statistics = "t.test",
                                paired = FALSE)
  
  # Extract statistic result
  stat_result <- DataCell@statistic
  
  # Ensure fresh data by filtering only for the current comparison
  stat_result <- stat_result[stat_result$comparison == paste0(condition_name, " vs. samples_baseline"), ]
  
  # Remove NA values before filtering
  stat_result <- stat_result[!is.na(stat_result$lfc) & !is.na(stat_result$pvalue), ]
  
  # Convert pvalue to -log10(pvalue) for comparison
  stat_result$log_pvalue <- -log10(stat_result$pvalue)
  
  # Accumulate the statistical results of this iteration
  all_stat_results <- rbind(all_stat_results, stat_result)
  
  # Upregulated clusters (lfc > threshold and log10(pvalue) > threshold)
  upregulated_clusters_list[[paste0(condition_name, "_vs_samples_baseline")]] <- stat_result[stat_result$lfc > th.fc & stat_result$log_pvalue > th.pv, ]$clusters
  
  # Downregulated clusters (lfc < -threshold and log10(pvalue) > threshold)
  downregulated_clusters_list[[paste0(condition_name, "_vs_samples_baseline")]] <- stat_result[stat_result$lfc < -th.fc & stat_result$log_pvalue > th.pv, ]$clusters
  
  # Print the results
  cat("\nUpregulated clusters in", paste0(condition_name, " vs. samples_baseline"), ":\n")
  print(upregulated_clusters_list[[condition_name]])
  
  cat("\nDownregulated clusters in", paste0(condition_name, " vs. samples_baseline"), ":\n")
  print(downregulated_clusters_list[[condition_name]])
  
  # Generate volcano plot
  volcano_plot <- plotVolcano(DataCell,
                              comparison = paste0(condition_name, " vs. samples_baseline"),
                              th.pv = th.pv,
                              th.fc = th.fc,
                              plot.text = TRUE)
  
  # Save plot
  ggsave(filename = paste0("./03_figures/volcanoplots/volcanoplot_", condition_name, "_vs_samples_baseline.png"),
         plot = volcano_plot, width = 10, height = 10)
}
DataCell@statistic <- all_stat_results

# Define significantly changed cluster lists for 8 conditions vs baseline
upregulated_clusters_PP_vs_baseline <- list()
upregulated_clusters_PB_vs_baseline <- list()
downregulated_clusters_PP_vs_baseline <- list()
downregulated_clusters_PB_vs_baseline <- list()

upregulated_clusters_PP_vs_baseline <- list(
  PPD03 = upregulated_clusters_list$samples_PPD03_vs_samples_baseline,
  PPD08 = upregulated_clusters_list$samples_PPD08_vs_samples_baseline,
  PPD14 = upregulated_clusters_list$samples_PPD14_vs_samples_baseline,
  PPD57 = upregulated_clusters_list$samples_PPD57_vs_samples_baseline
)

upregulated_clusters_PB_vs_baseline <- list(
  PBD03 = upregulated_clusters_list$samples_PBD03_vs_samples_baseline,
  PBD08 = upregulated_clusters_list$samples_PBD08_vs_samples_baseline,
  PBD14 = upregulated_clusters_list$samples_PBD14_vs_samples_baseline,
  PBD28 = upregulated_clusters_list$samples_PBD28_vs_samples_baseline
)

downregulated_clusters_PP_vs_baseline <- list(
  PPD03 = downregulated_clusters_list$samples_PPD03_vs_samples_baseline,
  PPD08 = downregulated_clusters_list$samples_PPD08_vs_samples_baseline,
  PPD14 = downregulated_clusters_list$samples_PPD14_vs_samples_baseline,
  PPD57 = downregulated_clusters_list$samples_PPD57_vs_samples_baseline
)

downregulated_clusters_PB_vs_baseline <- list(
  PBD03 = downregulated_clusters_list$samples_PBD03_vs_samples_baseline,
  PBD08 = downregulated_clusters_list$samples_PBD08_vs_samples_baseline,
  PBD14 = downregulated_clusters_list$samples_PBD14_vs_samples_baseline,
  PBD28 = downregulated_clusters_list$samples_PBD28_vs_samples_baseline
)

# Function to remove empty clusters
remove_empty_clusters <- function(cluster_list) {
  cluster_list[sapply(cluster_list, function(x) length(x) > 0)]
}

# Remove empty clusters
upregulated_clusters_PP_vs_baseline <- remove_empty_clusters(upregulated_clusters_PP_vs_baseline)
upregulated_clusters_PB_vs_baseline <- remove_empty_clusters(upregulated_clusters_PB_vs_baseline)
downregulated_clusters_PP_vs_baseline <- remove_empty_clusters(downregulated_clusters_PP_vs_baseline)
downregulated_clusters_PB_vs_baseline <- remove_empty_clusters(downregulated_clusters_PB_vs_baseline)
