plotMDS <- function(Celldata,
                    matrix = c("abundance","expression"),
                    levels = c("clusters", "samples"),
                    condition.samples = c("condition", "timepoint"),
                    clusters = NULL,
                    samples = NULL,
                    plot.text = TRUE) {
  
  levels <- match.arg(levels)
  condition.samples <- match.arg(condition.samples)
  matrix <- match.arg(matrix)
  
  checkmate::qassert(levels, "S1")
  checkmate::qassert(condition.samples, "S1")
  checkmate::qassert(matrix, "S1")
  checkmate::qassert(clusters, c("0", "S+"))
  checkmate::qassert(samples, c("0", "S+"))
  checkmate::qassert(plot.text, "B1")
  
  if (levels != "clusters" && levels != "samples") {
    stop("The levels name is invalid")
  }
  
  if (matrix != "abundance" && matrix != "expression") {
    stop("The matrix name is invalid")
  }
  
  if (matrix == "abundance") {
    data.matrix <- Celldata@matrix.abundance
    if (!is.null(clusters)) {
      data.matrix <- data.matrix[rownames(data.matrix) %in% clusters, ]
    }
    if (!is.null(samples)) {
      data.matrix <- data.matrix[, names(data.matrix) %in% samples]
    }
  } else {
    data.matrix <- cbind(Celldata@matrix.expression, 
                         "samples" = Celldata@samples,
                         "clusters" = Celldata@identify.clusters)
    if (!is.null(clusters)){
      data.matrix = data.matrix[data.matrix$clusters %in% clusters,]
    }
    if (!is.null(samples)) {
      data.matrix = data.matrix[data.matrix$samples %in% samples,]
    }
    if (levels == "clusters") {
      data.matrix$samples <- NULL
      data.matrix <- plyr::ddply(data.matrix, "clusters", function(x) {
        x$clusters <- NULL
        apply(x, 2, stats::median)
      })
      rownames(data.matrix) <- data.matrix$clusters
      data.matrix$clusters <- NULL
    } else {
      data.matrix$clusters <- NULL
      data.matrix <- plyr::ddply(data.matrix, "samples", function(x) {
        x$samples <- NULL
        apply(x, 2, stats::median)
      })
      
      rownames(data.matrix) <- data.matrix$samples
      data.matrix$samples <- NULL
      data.matrix <- t(data.matrix)
    }
  }
  
  if (levels == "clusters") {
    
    dist.clusters <- stats::dist(data.matrix)
    fit1 <- MASS::isoMDS(dist.clusters, k = 2, trace = FALSE)
    
    x1 <- fit1$points[, 1]
    y1 <- fit1$points[, 2]
    
    min.lim <- min(min(x1), min(y1)) * 1.1
    max.lim <- max(max(x1), max(y1)) * 1.1
    
    proj.clusters <- data.frame(x = x1,
                                y = y1)
    
    proj.clusters$clusters <- rownames(data.matrix)
    
    plot <- ggplot2::ggplot() +
      ggplot2::labs(title = "Multidimensional Scaling",
                    subtitle = paste0("Kruskal's stress = ", round(fit1$stress, 2))) +
      ggplot2::geom_hline(yintercept = (min.lim + max.lim) / 2, linetype = "dashed") +
      ggplot2::geom_vline(xintercept = (min.lim + max.lim) / 2, linetype = "dashed") +
      ggiraph::geom_point_interactive(data = proj.clusters,
                                      ggplot2::aes(x = x, y = y,
                                                   fill = clusters,
                                                   tooltip = clusters,
                                                   data_id = clusters),
                                      shape = 21, size = 5, fill = "black", color = "black")
    
    if (plot.text == TRUE) {
      plot <- plot +
        ggrepel::geom_text_repel(data = proj.clusters,
                                 ggplot2::aes(x = x,
                                              y = y,
                                              label = clusters),
                                 size = 3, max.overlaps = Inf)
    }
    
  } else {
    
    dist.samples <- stats::dist(t(data.matrix))
    
    fit2 <- MASS::isoMDS(dist.samples, k = 2, trace = FALSE)
    x2 <- fit2$points[, 1]
    y2 <- fit2$points[, 2]
    
    min.lim <- min(min(x2), min(y2)) * 1.1
    max.lim <- max(max(x2), max(y2)) * 1.1
    
    proj.samples <- data.frame(x = x2,
                               y = y2)
    
    proj.samples$samples <- colnames(data.matrix)
    
    proj.samples <- merge(proj.samples, Celldata@metadata, by = "row.names")
    proj.samples$Row.names <- NULL
    plot <- ggplot2::ggplot() +
      ggplot2::labs(title = "Multidimensional Scaling",
                    subtitle = paste0("Kruskal's stress = ", round(fit2$stress, 2))) +
      ggplot2::geom_hline(yintercept = (min.lim + max.lim) / 2, linetype = "dashed") +
      ggplot2::geom_vline(xintercept = (min.lim + max.lim) / 2, linetype = "dashed") +
      geom_convexhull(data = proj.samples,
                         ggplot2::aes(x = x, y = y, group = get(condition.samples), color = get(condition.samples)), alpha=0.05) +  # Added lines connecting points by condition
      ggiraph::geom_point_interactive(data = proj.samples,
                                      ggplot2::aes(x = x,
                                                   y = y,
                                                   fill = get(condition.samples),
                                                   tooltip = samples,
                                                   data_id = individual),
                                      shape = 21, size = 4, color = "lightgrey")
    
    if (plot.text == TRUE) {
      plot <- plot +
        ggrepel::geom_text_repel(data = proj.samples,
                                 ggplot2::aes(x = x,
                                              y = y,
                                              label = samples),
                                 max.overlaps = Inf,
                                 size = 3)
    }
  }
  
  plot <- plot + ggplot2::coord_fixed()
  
  plot <- plot +
    ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5),
                   plot.subtitle = ggplot2::element_text(hjust = 0.5, face = "italic"),
                   aspect.ratio = 1,
                   axis.title.x = ggplot2::element_blank(),
                   axis.title.y = ggplot2::element_blank(),
                   axis.text.x = ggplot2::element_blank(),
                   axis.text.y = ggplot2::element_blank(),
                   axis.ticks = ggplot2::element_blank(),
                   panel.background = ggplot2::element_blank(),
                   panel.border = ggplot2::element_rect(fill = NA),
                   panel.grid.minor = ggplot2::element_blank(),
                   panel.grid.major = ggplot2::element_blank()) +
    ggplot2::guides(fill = ggplot2::guide_legend(title = NULL),
                    color = ggplot2::guide_legend(title = NULL))
  
  return(plot)
}
