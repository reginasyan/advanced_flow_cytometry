library(devtools)
library("CellVizR")
library("SPADEVizR")

setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Master 2 /Master 2 I2S/advanced_cytometry")

samples = colnames(results@cluster.abundances)
samples_BPD19 = c("BPD19_BB078","BPD19_BB231","BPD19_BC641","BPD19_BD619","BPD19_BD620")
samples_PBD03 = c("PBD03_BB078","PBD03_BB231","PBD03_BC641","PBD03_BD619","PBD03_BD620")
samples_PBD08 = c("PBD08_BB078","PBD08_BB231","PBD08_BC641","PBD08_BD619","PBD08_BD620")
samples_PBD14 = c("PBD14_BB078","PBD14_BB231","PBD14_BC641","PBD14_BD619","PBD14_BD620")
samples_PBD28 = c("PBD28_BB078","PBD28_BB231","PBD28_BC641","PBD28_BD619","PBD28_BD620")
samples_PPD03 = c("PPD03_BB078","PPD03_BB231","PPD03_BC641","PPD03_BD619")
samples_PPD08 = c("PPD08_BB078","PPD08_BC641","PPD08_BD619","PPD08_BD620")
samples_PPD14 = c("PPD14_BB078","PPD14_BC641","PPD14_BD619","PPD14_BD620")
samples_PPD57 = c("PPD57_BB078","PPD57_BB231","PPD57_BC641","PPD57_BD619","PPD57_BD620")

#loading results and DAC
load("./07_rsave/spade/results_spade.Rsave")
load("./07_rsave/spade/resultsDAC_PBD03_spade.Rsave")
load("./07_rsave/spade/resultsDAC_PBD08_spade.Rsave")
load("./07_rsave/spade/resultsDAC_PBD14_spade.Rsave")
load("./07_rsave/spade/resultsDAC_PBD28_spade.Rsave")
load("./07_rsave/spade/resultsDAC_PPD03_spade.Rsave")
load("./07_rsave/spade/resultsDAC_PPD08_spade.Rsave")
load("./07_rsave/spade/resultsDAC_PPD14_spade.Rsave")
load("./07_rsave/spade/resultsDAC_PPD57_spade.Rsave")

# Or generate a loop to create DAC and plot it : 
output_dir <- "~/Library/Mobile Documents/com~apple~CloudDocs/Master 2 /Master 2 I2S/advanced_cytometry/03_figures/05_volcanos/spade_200"
## Create a list of samples to test, with names for timepoints to test
samples_condition1 <- list(samples_PBD03, samples_PBD08, samples_PBD14, samples_PBD28, samples_PPD03, samples_PPD08, samples_PPD14, samples_PPD57)
names(samples_condition1) <- c("PBD03", "PBD08", "PBD14", "PBD28","PPD03", "PPD08", "PPD14", "PPD57")
## Loop for each time point 
for (condition_name in names(samples_condition1)) {
  resultsDAC <- identifyDAC(
    results, 
    condition1 = samples_condition1[[condition_name]], 
    condition2 = samples_BPD19, 
    th.pvalue = 0.05, 
    th.fc = 2, 
    method.paired = FALSE
  )
  
  # Save the plot for each timepoint
  output_file <- file.path(output_dir, paste0("DAC_", condition_name, ".png"))
  png(filename = output_file, width = 1000, height = 696)
  plot(resultsDAC)
  dev.off()
}

# Exctract data from volcanoplots 
## Downregulated clusters
stats_signif_down <- resultsDAC@results[resultsDAC@results$fold.change <= -1 & 
                                          -log10(resultsDAC@results$pvalue) >= 1.3,]$cluster
print(stats_signif_down)


## Upregulated clusters
stats_signif_up <- resultsDAC@results[resultsDAC@results$fold.change >= 1 & 
                                      -log10(resultsDAC@results$pvalue) >= 1.3,]$cluster
print(stats_signif_up)

### loop
#### create a list of DAC results sorted by timepoint
resultsDAC_list <- list(
  PBD03 = resultsDAC_PBD03,
  PBD08 = resultsDAC_PBD08,
  PBD14 = resultsDAC_PBD14,
  PBD28 = resultsDAC_PBD28,
  PPD03 = resultsDAC_PPD03,
  PPD08 = resultsDAC_PPD08,
  PPD14 = resultsDAC_PPD14,
  PPD57 = resultsDAC_PPD57
)

### Output lists to store results
downregulated_clusters <- list()
upregulated_clusters <- list()

###Loop 
for (timepoint in names(resultsDAC_list)) {
  # Extract the current resultsDAC object
  resultsDAC <- resultsDAC_list[[condition_name]]
  #downs
  stats_signif_down <- resultsDAC@results[resultsDAC_list[[timepoint]]@results$fold.change <= -1 & 
                                        -log10(resultsDAC_list[[timepoint]]@results$pvalue) >= 1.3, ]$cluster
  
  #ups
  stats_signif_up <- resultsDAC@results[resultsDAC_list[[timepoint]]@results$fold.change >= 1 & 
                                  -log10(resultsDAC_list[[timepoint]]@results$pvalue) >= 1.3,]$cluster
  
  # Store results in lists
  downregulated_clusters[[timepoint]] <- stats_signif_down
  upregulated_clusters[[timepoint]] <- stats_signif_up
}
____________________________________________________________________________________________________
library(eulerr)

upregulated_clusters_PP = list(
    PPD03 = upregulated_clusters$PPD03,
    PPD08 = upregulated_clusters$PPD08,
    PPD14 = upregulated_clusters$PPD14,
    PPD57 = upregulated_clusters$PPD57)

upregulated_clusters_PB = list(
  PBD03 = upregulated_clusters$PBD03,
  PBD08 = upregulated_clusters$PBD08,
  PBD14 = upregulated_clusters$PBD14,
  PBD57 = upregulated_clusters$PBD57)

downregulated_clusters_PP = list(
  PPD03 = downregulated_clusters$PPD03,
  PPD08 = downregulated_clusters$PPD08,
  PPD14 = downregulated_clusters$PPD14,
  PPD57 = downregulated_clusters$PPD57)

downregulated_clusters_PB = list(
  PBD03 = downregulated_clusters$PBD03,
  PBD08 = downregulated_clusters$PBD08,
  PBD14 = downregulated_clusters$PBD14,
  PBD57 = downregulated_clusters$PBD57)

#save and load results
load("./07_rsave/spade/upregulated_clusters.Rsave")
load("./07_rsave/spade/upregulated_clusters_PP.Rsave")
load("./07_rsave/spade/upregulated_clusters_PB.Rsave")
load("./07_rsave/spade/downregulated_clusters.Rsave")
load("./07_rsave/spade/downregulated_clusters_PP.Rsave")
load("./07_rsave/spade/downregulated_clusters_PB.Rsave")


plot(euler(upregulated_clusters_PP),
      fills = TRUE,
      edges = TRUE,
      legend = TRUE,
      labels = identical(legend, TRUE),
      quantities = TRUE,
      strips = NULL,
      main = "Upregulated clusters PP",
      n = 200L)

plot(euler(downregulated_clusters_PP),
     fills = TRUE,
     edges = TRUE,
     legend = TRUE,
     labels = identical(legend, TRUE),
     quantities = TRUE,
     strips = NULL,
     main = "Downregulated clusters PP",
     n = 200L)

plot(euler(upregulated_clusters_PB),
     fills = TRUE,
     edges = TRUE,
     legend = TRUE,
     labels = identical(legend, TRUE),
     quantities = TRUE,
     strips = NULL,
     main = "Upregulated clusters PB",
     n = 200L)

plot(euler(downregulated_clusters_PB),
     fills = TRUE,
     edges = TRUE,
     legend = TRUE,
     labels = identical(legend, TRUE),
     quantities = TRUE,
     strips = NULL,
     main = "Downregulated clusters PB",
     n = 200L)

plot(euler(upregulated_clusters),
     fills = TRUE,
     edges = TRUE,
     legend = TRUE,
     labels = identical(legend, TRUE),
     quantities = TRUE,
     strips = NULL,
     main = "Upregulated clusters",
     n = 200L)

plot(euler(downregulated_clusters),
     fills = TRUE,
     edges = TRUE,
     legend = TRUE,
     labels = identical(legend, TRUE),
     quantities = TRUE,
     strips = NULL,
     main = "Downregulated clusters",
     n = 200L)

#Extract subsets from Euler plot 
PPD_up_euler = euler(upregulated_clusters_PP)
PPD_up_subsets <- lapply(names(PPD_up_euler$original.values), function(subset) {
  # Split subset name into individual time points
  sets <- unlist(strsplit(subset, "&"))
  
  # If multiple sets are listed, intersect them; if just one, take it directly
  if (length(sets) > 1) {
    clusters <- Reduce(intersect, upregulated_clusters_PP[sets])
  } else {
    clusters <- upregulated_clusters_PP[[sets]]
  }
  
  return(clusters)
})

# Assign subset names
names(PPD_up_subsets) <- names(PPD_up_euler$original.values)

#METACLUSTERS LABEL / SUBPOPULATION
mc_01 <- c("92", "200", "32", "162", "55", "165", "85", "83", "29", "34", "33", "126", "106", "37", "58")
mc_02 <- c("11", "164", "64", "47", "22", "84", "31", "117", "116", "130", "39", "2", "49", "159", "10", "26", "62", "51", "102", "168", "53", "59")
mc_03 <- c("197", "104", "134", "173", "182", "174", "180")
mc_04 <- c("145", "115", "79", "136", "191", "137", "183", "45", "120", "108", "139", "14", "99", "36", "109", "111", "177", "41", "6", "46", "23", "123", "18", "70", "17", "43")
mc_05 <- c("156", "8", "135", "175", "138", "52", "122", "61", "150", "30", "82", "149")
mc_06 <- c("199", "87", "128", "28", "100", "4", "48", "75", "16", "113", "20", "178", "3", "89", "148", "158", "185", "27", "98", "163", "189", "133", "196", "181", "147", "193", "40", "125")
mc_07 <- c("166", "97", "194", "198", "179", "190", "140", "176", "81", "93", "153", "131", "146", "50", "121", "167", "152", "154")
mc_08 <- c("107", "132", "65", "118", "143", "54", "88", "101", "155", "77", "169", "96", "142", "86", "144", "15", "171")
mc_09 <- c("151", "184", "105", "195", "13", "90", "110", "66", "161", "103", "24", "56", "119", "68", "78")
mc_10 <- c("160", "21", "72", "9", "192", "12", "114", "5", "38", "95", "35", "91", "127", "73", "76", "141", "129", "7", "44", "188", "57", "187")
mc_11 <- c("69", "170", "42", "71", "124", "1", "60", "25", "157", "63", "80", "172", "74", "94", "67", "186", "19", "112")
